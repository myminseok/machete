#!/bin/bash -l
set -eo pipefail

__parse_arguments() {
  number_of_arguments=$#
  deployment=${1:-''}
}

__indent() {
  local msg = $1
  echo "-----> $msg"
}

__check_usage() {
  if [ ${number_of_arguments} -ne 1 ] || ([ "$deployment" != "lucid" ] && [ "$deployment" != "trusty" ]); then
    echo "Usage:"
    echo "  $0 lucid|trusty"
    exit 1
  fi
}

__ensure_space() {
  __indent "Setting up org and space"

  cf create-org pivotal
  cf create-space integration -o pivotal
  cf target -o pivotal -s integration
}

__ensure_deployments() {
  if [ ! -d ~/workspace/deployments-buildpacks ]; then
    __indent " unable to find ~/workspace/deployments-buildpacks"
    exit 1
  fi
}

__target_api() {
  __indent "Targetting CF API"

  if [ "$deployment" == "lucid" ]; then
    __indent " with lucid BOSH Lite environment"
    cf api api.10.244.0.34.xip.io --skip-ssl-validation
  elif [ "$deployment" == "trusty" ]; then
    __indent " with trusty BOSH Lite environment"
    cf api api.10.244.1.34.xip.io --skip-ssl-validation
  else
    __indent " with AWS deployment"
    cf api api."$deployment".cf-app.com --skip-ssl-validation
  fi

  set +e
  cf login -u admin -p admin -o pivotal -s integration

  login_result=$?
  set -e

  if [ $login_result -ne 0 ]; then
    __ensure_space
  fi
}

__target_bosh() {
  __indent "Targetting bosh"

  set +e
  if [ "$deployment" = "lucid" ]; then
    __indent " with lucid BOSH Lite environment"
    bosh target 192.168.50.4
    bosh login admin admin
    bosh deployment ../bosh-lite/manifests/cf-manifest.yml
  elif [ "$deployment" = "trusty" ]; then
    __indent " with trusty BOSH Lite environment"
    bosh target 192.168.200.4
    bosh login admin admin
    bosh deployment ../bosh-lite-trusty/manifests/cf-manifest.yml
  else
    __indent " with AWS deployment"
    __ensure_deployments
    . ~/workspace/deployments-buildpacks/bin/switch $deployment
  fi
  set -e
}

__reset_postgres_security_groups() {
  __target_api

  __indent "Setting up security groups for PostgreSQL access"

  cf delete-security-group postgres-access -f
  cf create-security-group postgres-access "./scripts/assets/${deployment}_postgres_security_group.json"
  cf bind-security-group postgres-access pivotal integration
}

__ensure_internet_traffic_logging() {
  __target_bosh

  __indent "Setting up internet egress logging"

  bundle

  if [ "$deployment" == "lucid" ]; then
    __indent " with lucid BOSH Lite environment"
    export VAGRANT_CWD=$HOME/workspace/bosh-lite-trusty
    bundle exec ./scripts/enable_bosh_lite_enterprise_firewall.rb
  elif [ "$deployment" == "trusty" ]; then
    __indent " with lucid BOSH Lite environment"
    export VAGRANT_CWD=$HOME/workspace/bosh-lite 
    bundle exec ./scripts/enable_bosh_lite_enterprise_firewall.rb
  else
    __indent " with AWS deployment"
    __ensure_deployments
    bundle exec ./script/enable_bosh_aws_enterprise_firewall.rb
  fi
}

__create_database_users() {
  __target_bosh

  __indent "Creating database users"

  postgres_path_command="postgres_path=\`find /var/vcap/data/packages/postgres/*/ -name bin\`"
  change_path_command="PATH=\$postgres_path:\$PATH"
  create_machete_user_command="psql -h 0.0.0.0 -U vcap -p 5524 -d postgres -c \"create user machete with encrypted password 'machete' SUPERUSER\""
  create_buildpacks_user_command="psql -h 0.0.0.0 -U vcap -p 5524 -d postgres -c \"create user buildpacks with encrypted password 'buildpacks'\""
  bosh ssh --gateway_user vcap postgres_z1 0 --default_password p "$postgres_path_command;$change_path_command;$create_machete_user_command;$create_buildpacks_user_command"
}


__parse_arguments $@
__check_usage

__reset_postgres_security_groups
__ensure_internet_traffic_logging
__create_database_users
